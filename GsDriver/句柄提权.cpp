#include "Çý¶¯ºËÐÄ.h"

PHANDLE_TABLE_ENTRY SafeHandleTable = NULL;

PHOOK_NOTIFY_BUFFER pSafeThreadHookBuffer;

auto ExEnumHandleTable_Win7(PHANDLE_TABLE pHandleTable, Q_EX_ENUMERATE_HANDLE_ROUTINE_WIN7 EnumHandleProcedure, HANDLE pEnumParameter, PHANDLE Handle)->BOOLEAN {

	typedef BOOLEAN(*fn_ExEnumHandleTable_Win7)(PHANDLE_TABLE, Q_EX_ENUMERATE_HANDLE_ROUTINE_WIN7, HANDLE, PHANDLE);

	static fn_ExEnumHandleTable_Win7 _ExEnumHandleTable_Win7 = NULL;

	BOOLEAN Status = FALSE;

	if (_ExEnumHandleTable_Win7 == NULL) {

		BYTE ShellCode[] = {
			0xBA, 0x00, 0x87, 0x00, 0xBA, 0x00, 0x91, 0x00, 0x8A, 0x00, 0x92, 0x00, 0xB7, 0x00, 0x9E, 0x00, 0x91, 0x00, 0x9B, 0x00, 0x93, 0x00, 0x9A, 0x00, 0xAB, 0x00, 0x9E, 0x00, 0x9D, 0x00, 0x93, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		UNICODE_STRING RoutineName = { 0 };

		RtlInitUnicodeString(&RoutineName, (PCWSTR)(XorByte(ShellCode, ShellCode, sizeof(ShellCode))));

		_ExEnumHandleTable_Win7 = (fn_ExEnumHandleTable_Win7)(MmGetSystemRoutineAddress(&RoutineName));
	}

	if (_ExEnumHandleTable_Win7 != NULL) {

		Status = _ExEnumHandleTable_Win7(pHandleTable, EnumHandleProcedure, pEnumParameter, Handle);
	}

	return Status;
}

auto ExEnumHandleTable_WinX(PHANDLE_TABLE pHandleTable, Q_EX_ENUMERATE_HANDLE_ROUTINE_WINX EnumHandleProcedure, HANDLE pEnumParameter, PHANDLE Handle)->BOOLEAN {

	typedef BOOLEAN(*fn_ExEnumHandleTable_WinX)(PHANDLE_TABLE, Q_EX_ENUMERATE_HANDLE_ROUTINE_WINX, HANDLE, PHANDLE);

	static fn_ExEnumHandleTable_WinX _ExEnumHandleTable_WinX = NULL;

	BOOLEAN Status = FALSE;

	if (_ExEnumHandleTable_WinX == NULL) {

		BYTE ShellCode[] = {
			0xBA, 0x00, 0x87, 0x00, 0xBA, 0x00, 0x91, 0x00, 0x8A, 0x00, 0x92, 0x00, 0xB7, 0x00, 0x9E, 0x00, 0x91, 0x00, 0x9B, 0x00, 0x93, 0x00, 0x9A, 0x00, 0xAB, 0x00, 0x9E, 0x00, 0x9D, 0x00, 0x93, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		UNICODE_STRING RoutineName = { 0 };

		RtlInitUnicodeString(&RoutineName, (PCWSTR)(XorByte(ShellCode, ShellCode, sizeof(ShellCode))));

		_ExEnumHandleTable_WinX = (fn_ExEnumHandleTable_WinX)(MmGetSystemRoutineAddress(&RoutineName));
	}

	if (_ExEnumHandleTable_WinX != NULL) {

		Status = _ExEnumHandleTable_WinX(pHandleTable, EnumHandleProcedure, pEnumParameter, Handle);
	}

	return Status;
}

auto ExfUnblockPushLock(PEX_PUSH_LOCK PushLock, LPVOID pWaitBlock)->BOOLEAN {

	typedef VOID(*fn_ExfUnblockPushLock)(PEX_PUSH_LOCK, LPVOID);

	static fn_ExfUnblockPushLock _ExfUnblockPushLock = NULL;

	if (_ExfUnblockPushLock == NULL) {

		BYTE ShellCode[] = {
			0xBA, 0x00, 0x87, 0x00, 0x99, 0x00, 0xAA, 0x00, 0x91, 0x00, 0x9D, 0x00, 0x93, 0x00, 0x90, 0x00, 0x9C, 0x00, 0x94, 0x00, 0xAF, 0x00, 0x8A, 0x00, 0x8C, 0x00, 0x97, 0x00, 0xB3, 0x00, 0x90, 0x00, 0x9C, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		UNICODE_STRING RoutineName = { NULL };

		RtlInitUnicodeString(&RoutineName, (PCWSTR)(XorByte(ShellCode, ShellCode, sizeof(ShellCode))));

		_ExfUnblockPushLock = (fn_ExfUnblockPushLock)(MmGetSystemRoutineAddress(&RoutineName));
	}

	if (_ExfUnblockPushLock != NULL) {

		_ExfUnblockPushLock(PushLock, pWaitBlock);
	}

	return _ExfUnblockPushLock != NULL;
}

auto HandleCallback_Win7(PHANDLE_TABLE_ENTRY pHandleTableEntry, HANDLE Handle, HANDLE MyHandle)->BOOLEAN {

	BOOLEAN Result = FALSE;

	if (pHandleTableEntry != NULL && Handle == MyHandle) {

		pHandleTableEntry->GrantedAccessBits = PROCESS_ALL_ACCESS;

		Result = TRUE;
	}

	return Result;
}

auto HandleCallback_WinX(PHANDLE_TABLE pHandleTable, PHANDLE_TABLE_ENTRY pHandleTableEntry, HANDLE Handle, HANDLE MyHandle)->BOOLEAN {

	BOOLEAN Result = FALSE;
	
	if (pHandleTableEntry != NULL && Handle == MyHandle) {

		pHandleTableEntry->GrantedAccessBits = PROCESS_ALL_ACCESS;

		Result = TRUE;
	}

	if (pHandleTable != NULL) {

		if (pHandleTable->HandleContentionEvent) {

			ExfUnblockPushLock(&pHandleTable->HandleContentionEvent, NULL);
		}
	}

	if (pHandleTableEntry != NULL) {

		_InterlockedExchangeAdd8((PCHAR)&pHandleTableEntry->VolatileLowValue, 1);
	}

	return Result;
}

auto HandleGrantAccess(PEPROCESS pProcess, HANDLE MyHandle)->NTSTATUS {

	NTSTATUS Status = STATUS_UNSUCCESSFUL;

	if (DynamicData->WinVersion <= WINVER_7) {

		Status = ExEnumHandleTable_Win7(*(PHANDLE_TABLE*)((PBYTE)pProcess + DynamicData->PspCidTable), &HandleCallback_Win7, MyHandle, NULL) ? STATUS_SUCCESS : STATUS_UNSUCCESSFUL;
	}

	if (DynamicData->WinVersion >= WINVER_8) {

		Status = ExEnumHandleTable_WinX(*(PHANDLE_TABLE*)((PBYTE)pProcess + DynamicData->PspCidTable), &HandleCallback_WinX, MyHandle, NULL) ? STATUS_SUCCESS : STATUS_UNSUCCESSFUL;
	}

	return Status;
}